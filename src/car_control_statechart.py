"""Implementation of statechart car_control_statechart.
Generated by YAKINDU Statechart Tools code generator.
"""

import queue

class CarControlStatechart:
	"""Implementation of the state machine CarControlStatechart.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_car_on,
			main_region_car_on_r1_moving_fwd,
			main_region_car_on_r1_stopped,
			main_region_car_off,
			main_region_car_off_r2_shuting_down,
			main_region_car_off_r2_shuting_down_r2_1_brakelights_on,
			main_region_car_off_r2_shuting_down_r2_1_brakelights_off,
			main_region_car_off_r2_final_,
			null_state
		) = range(9)
	
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		
		self.obstacle_detected = None
		self.road_is_clear = None
		self.power_down = None
		self.operation_callback = None
		
		self.in_event_queue = queue.Queue()
		# enumeration of all states:
		self.__State = CarControlStatechart.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 1
		for __state_index in range(1):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 4
		
		# initializations:
		self.__is_executing = False
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		"""
		return (self.__state_vector[0] == self.__State.main_region_car_off_r2_final_)
								
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_car_on:
			return (self.__state_vector[0] >= self.__State.main_region_car_on)\
				and (self.__state_vector[0] <= self.__State.main_region_car_on_r1_stopped)
		if s == self.__State.main_region_car_on_r1_moving_fwd:
			return self.__state_vector[0] == self.__State.main_region_car_on_r1_moving_fwd
		if s == self.__State.main_region_car_on_r1_stopped:
			return self.__state_vector[0] == self.__State.main_region_car_on_r1_stopped
		if s == self.__State.main_region_car_off:
			return (self.__state_vector[0] >= self.__State.main_region_car_off)\
				and (self.__state_vector[0] <= self.__State.main_region_car_off_r2_final_)
		if s == self.__State.main_region_car_off_r2_shuting_down:
			return (self.__state_vector[0] >= self.__State.main_region_car_off_r2_shuting_down)\
				and (self.__state_vector[0] <= self.__State.main_region_car_off_r2_shuting_down_r2_1_brakelights_off)
		if s == self.__State.main_region_car_off_r2_shuting_down_r2_1_brakelights_on:
			return self.__state_vector[0] == self.__State.main_region_car_off_r2_shuting_down_r2_1_brakelights_on
		if s == self.__State.main_region_car_off_r2_shuting_down_r2_1_brakelights_off:
			return self.__state_vector[0] == self.__State.main_region_car_off_r2_shuting_down_r2_1_brakelights_off
		if s == self.__State.main_region_car_off_r2_final_:
			return self.__state_vector[0] == self.__State.main_region_car_off_r2_final_
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(4):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	def raise_obstacle_detected(self):
		"""Raise method for event obstacle_detected.
		"""
		self.in_event_queue.put(self.__raise_obstacle_detected_call)
		self.run_cycle()
	
	def __raise_obstacle_detected_call(self):
		"""Raise callback for event obstacle_detected.
		"""
		self.obstacle_detected = True
	
	def raise_road_is_clear(self):
		"""Raise method for event road_is_clear.
		"""
		self.in_event_queue.put(self.__raise_road_is_clear_call)
		self.run_cycle()
	
	def __raise_road_is_clear_call(self):
		"""Raise callback for event road_is_clear.
		"""
		self.road_is_clear = True
	
	def raise_power_down(self):
		"""Raise method for event power_down.
		"""
		self.in_event_queue.put(self.__raise_power_down_call)
		self.run_cycle()
	
	def __raise_power_down_call(self):
		"""Raise callback for event power_down.
		"""
		self.power_down = True
	
	def __entry_action_main_region__car_on_r1__moving_fwd(self):
		"""Entry action for state 'MovingFwd'..
		"""
		self.operation_callback.move("fwd")
		self.operation_callback.brakelights("off")
		
	def __entry_action_main_region__car_on_r1__stopped(self):
		"""Entry action for state 'Stopped'..
		"""
		self.timer_service.set_timer(self, 0, (2 * 1000), False)
		self.operation_callback.move("stop")
		
	def __entry_action_main_region__car_off_r2__shuting_down(self):
		"""Entry action for state 'ShutingDown'..
		"""
		self.timer_service.set_timer(self, 1, (5 * 1000), False)
		self.operation_callback.move("stop")
		
	def __entry_action_main_region__car_off_r2__shuting_down_r2_1_brakelights_on(self):
		"""Entry action for state 'brakelightsOn'..
		"""
		self.timer_service.set_timer(self, 2, 300, False)
		self.operation_callback.brakelights("on")
		
	def __entry_action_main_region__car_off_r2__shuting_down_r2_1_brakelights_off(self):
		"""Entry action for state 'brakelightsOff'..
		"""
		self.timer_service.set_timer(self, 3, 300, False)
		self.operation_callback.brakelights("off")
		
	def __exit_action_main_region__car_on_r1__moving_fwd(self):
		"""Exit action for state 'MovingFwd'..
		"""
		self.operation_callback.brakelights("on")
		
	def __exit_action_main_region__car_on_r1__stopped(self):
		"""Exit action for state 'Stopped'..
		"""
		self.timer_service.unset_timer(self, 0)
		
	def __exit_action_main_region__car_off_r2__shuting_down(self):
		"""Exit action for state 'ShutingDown'..
		"""
		self.timer_service.unset_timer(self, 1)
		
	def __exit_action_main_region__car_off_r2__shuting_down_r2_1_brakelights_on(self):
		"""Exit action for state 'brakelightsOn'..
		"""
		self.timer_service.unset_timer(self, 2)
		
	def __exit_action_main_region__car_off_r2__shuting_down_r2_1_brakelights_off(self):
		"""Exit action for state 'brakelightsOff'..
		"""
		self.timer_service.unset_timer(self, 3)
		
	def __enter_sequence_main_region__car_on_default(self):
		"""'default' enter sequence for state CarOn.
		"""
		self.__enter_sequence_main_region__car_on_r1_default()
		
	def __enter_sequence_main_region__car_on_r1__moving_fwd_default(self):
		"""'default' enter sequence for state MovingFwd.
		"""
		self.__entry_action_main_region__car_on_r1__moving_fwd()
		self.__state_vector[0] = self.State.main_region_car_on_r1_moving_fwd
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region__car_on_r1__stopped_default(self):
		"""'default' enter sequence for state Stopped.
		"""
		self.__entry_action_main_region__car_on_r1__stopped()
		self.__state_vector[0] = self.State.main_region_car_on_r1_stopped
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region__car_off_default(self):
		"""'default' enter sequence for state CarOff.
		"""
		self.__enter_sequence_main_region__car_off_r2_default()
		
	def __enter_sequence_main_region__car_off_r2__shuting_down_default(self):
		"""'default' enter sequence for state ShutingDown.
		"""
		self.__entry_action_main_region__car_off_r2__shuting_down()
		self.__enter_sequence_main_region__car_off_r2__shuting_down_r2_1_default()
		
	def __enter_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_on_default(self):
		"""'default' enter sequence for state brakelightsOn.
		"""
		self.__entry_action_main_region__car_off_r2__shuting_down_r2_1_brakelights_on()
		self.__state_vector[0] = self.State.main_region_car_off_r2_shuting_down_r2_1_brakelights_on
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_off_default(self):
		"""'default' enter sequence for state brakelightsOff.
		"""
		self.__entry_action_main_region__car_off_r2__shuting_down_r2_1_brakelights_off()
		self.__state_vector[0] = self.State.main_region_car_off_r2_shuting_down_r2_1_brakelights_off
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region__car_off_r2__final__default(self):
		"""Default enter sequence for state null.
		"""
		self.__state_vector[0] = self.State.main_region_car_off_r2_final_
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		self.__react_main_region__entry__default()
		
	def __enter_sequence_main_region__car_on_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region__car_on_r1__entry__default()
		
	def __enter_sequence_main_region__car_off_r2_default(self):
		"""'default' enter sequence for region r2.
		"""
		self.__react_main_region__car_off_r2__entry__default()
		
	def __enter_sequence_main_region__car_off_r2__shuting_down_r2_1_default(self):
		"""'default' enter sequence for region r2.1.
		"""
		self.__react_main_region__car_off_r2__shuting_down_r2_1__entry__default()
		
	def __exit_sequence_main_region__car_on(self):
		"""Default exit sequence for state CarOn.
		"""
		self.__exit_sequence_main_region__car_on_r1()
		
	def __exit_sequence_main_region__car_on_r1__moving_fwd(self):
		"""Default exit sequence for state MovingFwd.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region__car_on_r1__moving_fwd()
		
	def __exit_sequence_main_region__car_on_r1__stopped(self):
		"""Default exit sequence for state Stopped.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region__car_on_r1__stopped()
		
	def __exit_sequence_main_region__car_off_r2__shuting_down(self):
		"""Default exit sequence for state ShutingDown.
		"""
		self.__exit_sequence_main_region__car_off_r2__shuting_down_r2_1()
		self.__exit_action_main_region__car_off_r2__shuting_down()
		
	def __exit_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_on(self):
		"""Default exit sequence for state brakelightsOn.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region__car_off_r2__shuting_down_r2_1_brakelights_on()
		
	def __exit_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_off(self):
		"""Default exit sequence for state brakelightsOff.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__exit_action_main_region__car_off_r2__shuting_down_r2_1_brakelights_off()
		
	def __exit_sequence_main_region__car_off_r2__final_(self):
		"""Default exit sequence for final state..
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_car_on_r1_moving_fwd:
			self.__exit_sequence_main_region__car_on_r1__moving_fwd()
		elif state == self.State.main_region_car_on_r1_stopped:
			self.__exit_sequence_main_region__car_on_r1__stopped()
		elif state == self.State.main_region_car_off_r2_shuting_down_r2_1_brakelights_on:
			self.__exit_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_on()
			self.__exit_action_main_region__car_off_r2__shuting_down()
		elif state == self.State.main_region_car_off_r2_shuting_down_r2_1_brakelights_off:
			self.__exit_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_off()
			self.__exit_action_main_region__car_off_r2__shuting_down()
		elif state == self.State.main_region_car_off_r2_final_:
			self.__exit_sequence_main_region__car_off_r2__final_()
		
	def __exit_sequence_main_region__car_on_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_car_on_r1_moving_fwd:
			self.__exit_sequence_main_region__car_on_r1__moving_fwd()
		elif state == self.State.main_region_car_on_r1_stopped:
			self.__exit_sequence_main_region__car_on_r1__stopped()
		
	def __exit_sequence_main_region__car_off_r2__shuting_down_r2_1(self):
		"""Default exit sequence for region r2.1.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_car_off_r2_shuting_down_r2_1_brakelights_on:
			self.__exit_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_on()
		elif state == self.State.main_region_car_off_r2_shuting_down_r2_1_brakelights_off:
			self.__exit_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_off()
		
	def __react_main_region__car_on_r1__entry__default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region__car_on_r1__moving_fwd_default()
		
	def __react_main_region__entry__default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region__car_on_default()
		
	def __react_main_region__car_off_r2__entry__default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region__car_off_r2__shuting_down_default()
		
	def __react_main_region__car_off_r2__shuting_down_r2_1__entry__default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_on_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		return transitioned_before
	
	
	def __main_region__car_on_react(self, transitioned_before):
		"""Implementation of __main_region__car_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.power_down:
				self.__exit_sequence_main_region__car_on()
				self.__enter_sequence_main_region__car_off_default()
				self.__react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region__car_on_r1__moving_fwd_react(self, transitioned_before):
		"""Implementation of __main_region__car_on_r1__moving_fwd_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.obstacle_detected:
				self.__exit_sequence_main_region__car_on_r1__moving_fwd()
				self.__enter_sequence_main_region__car_on_r1__stopped_default()
				self.__main_region__car_on_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region__car_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region__car_on_r1__stopped_react(self, transitioned_before):
		"""Implementation of __main_region__car_on_r1__stopped_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[0]:
				self.__exit_sequence_main_region__car_on_r1__stopped()
				self.__enter_sequence_main_region__car_on_r1__moving_fwd_default()
				self.__main_region__car_on_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region__car_on_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region__car_off_react(self, transitioned_before):
		"""Implementation of __main_region__car_off_react function.
		"""
		transitioned_after = transitioned_before
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region__car_off_r2__shuting_down_react(self, transitioned_before):
		"""Implementation of __main_region__car_off_r2__shuting_down_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[1]:
				self.__exit_sequence_main_region__car_off_r2__shuting_down()
				self.operation_callback.brakelights("off")
				self.__enter_sequence_main_region__car_off_r2__final__default()
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region__car_off_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region__car_off_r2__shuting_down_r2_1_brakelights_on_react(self, transitioned_before):
		"""Implementation of __main_region__car_off_r2__shuting_down_r2_1_brakelights_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[2]:
				self.__exit_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_on()
				self.__enter_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_off_default()
				self.__main_region__car_off_r2__shuting_down_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region__car_off_r2__shuting_down_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region__car_off_r2__shuting_down_r2_1_brakelights_off_react(self, transitioned_before):
		"""Implementation of __main_region__car_off_r2__shuting_down_r2_1_brakelights_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[3]:
				self.__exit_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_off()
				self.__enter_sequence_main_region__car_off_r2__shuting_down_r2_1_brakelights_on_default()
				self.__main_region__car_off_r2__shuting_down_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region__car_off_r2__shuting_down_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region__car_off_r2__final__react(self, transitioned_before):
		"""Implementation of __main_region__car_off_r2__final__react function.
		"""
		transitioned_after = transitioned_before
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region__car_off_react(transitioned_before)
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.obstacle_detected = False
		self.road_is_clear = False
		self.power_down = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
		self.__time_events[3] = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_car_on_r1_moving_fwd:
			self.__main_region__car_on_r1__moving_fwd_react(-1)
		elif state == self.State.main_region_car_on_r1_stopped:
			self.__main_region__car_on_r1__stopped_react(-1)
		elif state == self.State.main_region_car_off_r2_shuting_down_r2_1_brakelights_on:
			self.__main_region__car_off_r2__shuting_down_r2_1_brakelights_on_react(-1)
		elif state == self.State.main_region_car_off_r2_shuting_down_r2_1_brakelights_off:
			self.__main_region__car_off_r2__shuting_down_r2_1_brakelights_off_react(-1)
		elif state == self.State.main_region_car_off_r2_final_:
			self.__main_region__car_off_r2__final__react(-1)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__micro_step()
			self.__clear_in_events()
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
			condition_0 = self.obstacle_detected or self.road_is_clear or self.power_down or self.__time_events[0] or self.__time_events[1] or self.__time_events[2] or self.__time_events[3]
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__enter_sequence_main_region_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_main_region()
		self.__is_executing = False
	
	
	
